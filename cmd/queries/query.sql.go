// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const getAllExercises = `-- name: GetAllExercises :many
SELECT id, name, description, created_at, updated_at FROM exercises
`

func (q *Queries) GetAllExercises(ctx context.Context) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, getAllExercises)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrackedExercises = `-- name: GetTrackedExercises :one
SELECT et.id, et.exercise_id, et.timestamp, et.reps, et.time_seconds, e.name AS exercise_name
FROM workout_logs et
JOIN exercises e ON et.exercise_id = e.id
`

type GetTrackedExercisesRow struct {
	ID           int64
	ExerciseID   int64
	Timestamp    string
	Reps         sql.NullInt64
	TimeSeconds  sql.NullInt64
	ExerciseName string
}

func (q *Queries) GetTrackedExercises(ctx context.Context) (GetTrackedExercisesRow, error) {
	row := q.db.QueryRowContext(ctx, getTrackedExercises)
	var i GetTrackedExercisesRow
	err := row.Scan(
		&i.ID,
		&i.ExerciseID,
		&i.Timestamp,
		&i.Reps,
		&i.TimeSeconds,
		&i.ExerciseName,
	)
	return i, err
}

const insertExercise = `-- name: InsertExercise :one
INSERT INTO exercises
(name, description, created_at, updated_at)
VALUES (?, ?, ?, ?)
RETURNING id
`

type InsertExerciseParams struct {
	Name        string
	Description sql.NullString
	CreatedAt   string
	UpdatedAt   string
}

func (q *Queries) InsertExercise(ctx context.Context, arg InsertExerciseParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertExercise,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertTrackedExercise = `-- name: InsertTrackedExercise :one
INSERT INTO workout_logs
(exercise_id, timestamp, reps, time_seconds)
VALUES (?, ?, ?, ?)
RETURNING id, exercise_id, timestamp, reps, time_seconds
`

type InsertTrackedExerciseParams struct {
	ExerciseID  int64
	Timestamp   string
	Reps        sql.NullInt64
	TimeSeconds sql.NullInt64
}

func (q *Queries) InsertTrackedExercise(ctx context.Context, arg InsertTrackedExerciseParams) (WorkoutLog, error) {
	row := q.db.QueryRowContext(ctx, insertTrackedExercise,
		arg.ExerciseID,
		arg.Timestamp,
		arg.Reps,
		arg.TimeSeconds,
	)
	var i WorkoutLog
	err := row.Scan(
		&i.ID,
		&i.ExerciseID,
		&i.Timestamp,
		&i.Reps,
		&i.TimeSeconds,
	)
	return i, err
}
